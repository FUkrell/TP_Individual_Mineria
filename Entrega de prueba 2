{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Federico Krell TP individual Casas.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# # https://www.properati.com.ar/data\n",
        "# ! wget -O ar_properties.csv.gz -q https://storage.googleapis.com/properati-data-public/ar_properties.csv.gz\n",
        "# ! gzip -d -f /content/ar_properties.csv.gz"
      ],
      "metadata": {
        "id": "A7BBykw5oQNl"
      },
      "execution_count": 110,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 111,
      "metadata": {
        "id": "jw8ogMDOpvKP"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "import sklearn as sk\n",
        "from sklearn import model_selection\n",
        "from sklearn import ensemble\n",
        "from sklearn import metrics\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "\n",
        "from pprint import pprint"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Lectura de datos"
      ],
      "metadata": {
        "id": "20D-m6GPyefp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "elViU3DvxNlv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a8d4f7a3-9a41-42fc-ec98-e8c47859fd54"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ! gzip -d -f /content/drive/MyDrive/ar_properties.csv.gz"
      ],
      "metadata": {
        "id": "2dbybcxDyeDO"
      },
      "execution_count": 113,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# df = pd.read_csv('/content/drive/MyDrive/ar_properties.csv', index_col=\"id\")  \n",
        "df = pd.read_csv('/content/drive/MyDrive/inmoblimpio.csv', index_col=\"id\")"
      ],
      "metadata": {
        "id": "CtV0wOGsqJLC"
      },
      "execution_count": 114,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "id": "thKYxfNuulgB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 695
        },
        "outputId": "2b2427fd-2d54-4d7c-9143-22212bb4e661"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                            ad_type  start_date    end_date  created_on  \\\n",
              "id                                                                        \n",
              "hjHZd/BZqSBy3zb+RrqPYg==  Propiedad  2020-08-22  2020-09-04  2020-08-22   \n",
              "2KF4gGpEVoyqnMVFBcF7IA==  Propiedad  2020-08-22  2020-09-04  2020-08-22   \n",
              "BRbo9ohkAnogBN3vgcbh1Q==  Propiedad  2020-08-22  2020-09-04  2020-08-22   \n",
              "twX40kvJoG1MI6LVXnRKpA==  Propiedad  2020-08-22  2020-09-04  2020-08-22   \n",
              "+KGGxikZuWylLGEfAS1QQQ==  Propiedad  2020-08-22  2020-09-04  2020-08-22   \n",
              "\n",
              "                                lat        lon         l1               l2  \\\n",
              "id                                                                           \n",
              "hjHZd/BZqSBy3zb+RrqPYg== -34.638910 -58.476073  Argentina  Capital Federal   \n",
              "2KF4gGpEVoyqnMVFBcF7IA== -34.562124 -58.464449  Argentina  Capital Federal   \n",
              "BRbo9ohkAnogBN3vgcbh1Q== -34.598112 -58.400784  Argentina  Capital Federal   \n",
              "twX40kvJoG1MI6LVXnRKpA== -34.614123 -58.378985  Argentina  Capital Federal   \n",
              "+KGGxikZuWylLGEfAS1QQQ== -34.603233 -58.385218  Argentina  Capital Federal   \n",
              "\n",
              "                                   l3   l4  ...  bathrooms  surface_total  \\\n",
              "id                                          ...                             \n",
              "hjHZd/BZqSBy3zb+RrqPYg==     Floresta  NaN  ...        NaN          372.0   \n",
              "2KF4gGpEVoyqnMVFBcF7IA==     Belgrano  NaN  ...        NaN            NaN   \n",
              "BRbo9ohkAnogBN3vgcbh1Q==     Recoleta  NaN  ...        3.0          265.0   \n",
              "twX40kvJoG1MI6LVXnRKpA==    Monserrat  NaN  ...        3.0          150.0   \n",
              "+KGGxikZuWylLGEfAS1QQQ==  San Nicolás  NaN  ...        1.0            NaN   \n",
              "\n",
              "                          surface_covered     price  currency  price_period  \\\n",
              "id                                                                            \n",
              "hjHZd/BZqSBy3zb+RrqPYg==              NaN  450000.0       USD       Mensual   \n",
              "2KF4gGpEVoyqnMVFBcF7IA==              NaN   20000.0       USD       Mensual   \n",
              "BRbo9ohkAnogBN3vgcbh1Q==            265.0  600000.0       USD       Mensual   \n",
              "twX40kvJoG1MI6LVXnRKpA==            150.0  195000.0       USD       Mensual   \n",
              "+KGGxikZuWylLGEfAS1QQQ==             12.0   22000.0       USD       Mensual   \n",
              "\n",
              "                                                                      title  \\\n",
              "id                                                                            \n",
              "hjHZd/BZqSBy3zb+RrqPYg==                                  Exclente lote !!    \n",
              "2KF4gGpEVoyqnMVFBcF7IA==  Excelente cochera fija y cubierta en edificio ...   \n",
              "BRbo9ohkAnogBN3vgcbh1Q==              Oficina comercial · 265m² · 2 Cochera   \n",
              "twX40kvJoG1MI6LVXnRKpA==      Importante Oficina en Micro centro de 150 m2.   \n",
              "+KGGxikZuWylLGEfAS1QQQ==                              Oficina - San Nicolas   \n",
              "\n",
              "                                                                description  \\\n",
              "id                                                                            \n",
              "hjHZd/BZqSBy3zb+RrqPYg==  Lote 365 mts 8,90 x 43 mts C3 II.. FOT 3.6 PAR...   \n",
              "2KF4gGpEVoyqnMVFBcF7IA==  Muy buena cochera, en el 4to piso en excelente...   \n",
              "BRbo9ohkAnogBN3vgcbh1Q==  Gran Oportunidad! Unica piso de oficinas de 26...   \n",
              "twX40kvJoG1MI6LVXnRKpA==  Importante  Oficina de de 150 m2 con palier pr...   \n",
              "+KGGxikZuWylLGEfAS1QQQ==  VENTA DE OFICINA A METROS DEL PALACIO DE TRIBU...   \n",
              "\n",
              "                         property_type operation_type  \n",
              "id                                                     \n",
              "hjHZd/BZqSBy3zb+RrqPYg==          Lote          Venta  \n",
              "2KF4gGpEVoyqnMVFBcF7IA==       Cochera          Venta  \n",
              "BRbo9ohkAnogBN3vgcbh1Q==       Oficina          Venta  \n",
              "twX40kvJoG1MI6LVXnRKpA==       Oficina          Venta  \n",
              "+KGGxikZuWylLGEfAS1QQQ==       Oficina          Venta  \n",
              "\n",
              "[5 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5fb3927d-28af-4ff4-bd03-46aec6b2488d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ad_type</th>\n",
              "      <th>start_date</th>\n",
              "      <th>end_date</th>\n",
              "      <th>created_on</th>\n",
              "      <th>lat</th>\n",
              "      <th>lon</th>\n",
              "      <th>l1</th>\n",
              "      <th>l2</th>\n",
              "      <th>l3</th>\n",
              "      <th>l4</th>\n",
              "      <th>...</th>\n",
              "      <th>bathrooms</th>\n",
              "      <th>surface_total</th>\n",
              "      <th>surface_covered</th>\n",
              "      <th>price</th>\n",
              "      <th>currency</th>\n",
              "      <th>price_period</th>\n",
              "      <th>title</th>\n",
              "      <th>description</th>\n",
              "      <th>property_type</th>\n",
              "      <th>operation_type</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>hjHZd/BZqSBy3zb+RrqPYg==</th>\n",
              "      <td>Propiedad</td>\n",
              "      <td>2020-08-22</td>\n",
              "      <td>2020-09-04</td>\n",
              "      <td>2020-08-22</td>\n",
              "      <td>-34.638910</td>\n",
              "      <td>-58.476073</td>\n",
              "      <td>Argentina</td>\n",
              "      <td>Capital Federal</td>\n",
              "      <td>Floresta</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>372.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>450000.0</td>\n",
              "      <td>USD</td>\n",
              "      <td>Mensual</td>\n",
              "      <td>Exclente lote !!</td>\n",
              "      <td>Lote 365 mts 8,90 x 43 mts C3 II.. FOT 3.6 PAR...</td>\n",
              "      <td>Lote</td>\n",
              "      <td>Venta</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2KF4gGpEVoyqnMVFBcF7IA==</th>\n",
              "      <td>Propiedad</td>\n",
              "      <td>2020-08-22</td>\n",
              "      <td>2020-09-04</td>\n",
              "      <td>2020-08-22</td>\n",
              "      <td>-34.562124</td>\n",
              "      <td>-58.464449</td>\n",
              "      <td>Argentina</td>\n",
              "      <td>Capital Federal</td>\n",
              "      <td>Belgrano</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>USD</td>\n",
              "      <td>Mensual</td>\n",
              "      <td>Excelente cochera fija y cubierta en edificio ...</td>\n",
              "      <td>Muy buena cochera, en el 4to piso en excelente...</td>\n",
              "      <td>Cochera</td>\n",
              "      <td>Venta</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BRbo9ohkAnogBN3vgcbh1Q==</th>\n",
              "      <td>Propiedad</td>\n",
              "      <td>2020-08-22</td>\n",
              "      <td>2020-09-04</td>\n",
              "      <td>2020-08-22</td>\n",
              "      <td>-34.598112</td>\n",
              "      <td>-58.400784</td>\n",
              "      <td>Argentina</td>\n",
              "      <td>Capital Federal</td>\n",
              "      <td>Recoleta</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>265.0</td>\n",
              "      <td>265.0</td>\n",
              "      <td>600000.0</td>\n",
              "      <td>USD</td>\n",
              "      <td>Mensual</td>\n",
              "      <td>Oficina comercial · 265m² · 2 Cochera</td>\n",
              "      <td>Gran Oportunidad! Unica piso de oficinas de 26...</td>\n",
              "      <td>Oficina</td>\n",
              "      <td>Venta</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>twX40kvJoG1MI6LVXnRKpA==</th>\n",
              "      <td>Propiedad</td>\n",
              "      <td>2020-08-22</td>\n",
              "      <td>2020-09-04</td>\n",
              "      <td>2020-08-22</td>\n",
              "      <td>-34.614123</td>\n",
              "      <td>-58.378985</td>\n",
              "      <td>Argentina</td>\n",
              "      <td>Capital Federal</td>\n",
              "      <td>Monserrat</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>195000.0</td>\n",
              "      <td>USD</td>\n",
              "      <td>Mensual</td>\n",
              "      <td>Importante Oficina en Micro centro de 150 m2.</td>\n",
              "      <td>Importante  Oficina de de 150 m2 con palier pr...</td>\n",
              "      <td>Oficina</td>\n",
              "      <td>Venta</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>+KGGxikZuWylLGEfAS1QQQ==</th>\n",
              "      <td>Propiedad</td>\n",
              "      <td>2020-08-22</td>\n",
              "      <td>2020-09-04</td>\n",
              "      <td>2020-08-22</td>\n",
              "      <td>-34.603233</td>\n",
              "      <td>-58.385218</td>\n",
              "      <td>Argentina</td>\n",
              "      <td>Capital Federal</td>\n",
              "      <td>San Nicolás</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.0</td>\n",
              "      <td>22000.0</td>\n",
              "      <td>USD</td>\n",
              "      <td>Mensual</td>\n",
              "      <td>Oficina - San Nicolas</td>\n",
              "      <td>VENTA DE OFICINA A METROS DEL PALACIO DE TRIBU...</td>\n",
              "      <td>Oficina</td>\n",
              "      <td>Venta</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 24 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5fb3927d-28af-4ff4-bd03-46aec6b2488d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5fb3927d-28af-4ff4-bd03-46aec6b2488d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5fb3927d-28af-4ff4-bd03-46aec6b2488d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 115
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h1> Análisis del conjunto de datos\n",
        " <h2> Parte 1 PreProcesamiento."
      ],
      "metadata": {
        "id": "byV0dQi-yiEd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "id": "fTHBTiNw05Nb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6fbf814f-de1d-46bb-8adb-28939853ab1a"
      },
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(175149, 24)"
            ]
          },
          "metadata": {},
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "id": "ixu1VZip07v1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e7787705-e807-41da-bba3-eff3e639c708"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['ad_type', 'start_date', 'end_date', 'created_on', 'lat', 'lon', 'l1',\n",
              "       'l2', 'l3', 'l4', 'l5', 'l6', 'rooms', 'bedrooms', 'bathrooms',\n",
              "       'surface_total', 'surface_covered', 'price', 'currency', 'price_period',\n",
              "       'title', 'description', 'property_type', 'operation_type'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "id": "WWYGz7Qn1aPK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a2eb8a39-5ba6-4e0f-f669-871a2133663f"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 175149 entries, hjHZd/BZqSBy3zb+RrqPYg== to fJLVUIziPl31ACoaE/fj1g==\n",
            "Data columns (total 24 columns):\n",
            " #   Column           Non-Null Count   Dtype  \n",
            "---  ------           --------------   -----  \n",
            " 0   ad_type          175149 non-null  object \n",
            " 1   start_date       175149 non-null  object \n",
            " 2   end_date         175149 non-null  object \n",
            " 3   created_on       175149 non-null  object \n",
            " 4   lat              165257 non-null  float64\n",
            " 5   lon              165257 non-null  float64\n",
            " 6   l1               175149 non-null  object \n",
            " 7   l2               175149 non-null  object \n",
            " 8   l3               175149 non-null  object \n",
            " 9   l4               8615 non-null    object \n",
            " 10  l5               0 non-null       float64\n",
            " 11  l6               0 non-null       float64\n",
            " 12  rooms            148869 non-null  float64\n",
            " 13  bedrooms         128525 non-null  float64\n",
            " 14  bathrooms        153305 non-null  float64\n",
            " 15  surface_total    117880 non-null  float64\n",
            " 16  surface_covered  117107 non-null  float64\n",
            " 17  price            175149 non-null  float64\n",
            " 18  currency         175149 non-null  object \n",
            " 19  price_period     85695 non-null   object \n",
            " 20  title            175149 non-null  object \n",
            " 21  description      175149 non-null  object \n",
            " 22  property_type    175149 non-null  object \n",
            " 23  operation_type   175149 non-null  object \n",
            "dtypes: float64(10), object(14)\n",
            "memory usage: 33.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Primeras concluciones:\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        " \n",
        "\n",
        "*   l6 no tiene informacion, se dropea.\n",
        "*   hay un 10% del database sin lat y long puede evaluarse tirar las filas sin esa info.\n",
        "*   **Mas importante hay una parte del databse sin precio, eso se tira seguro.**\n",
        "\n",
        "---\n",
        "A nivel operativo las fechas hay que pasarlas a formato de fecha. <br />\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "0rq9YDs21uTp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "En mis datos a predecir solo hay USD asique para evitar problemas de cambio de unidades voy a eleminar las que no son en USD.\n",
        "Tambien es solo de argentina a predecir. <br />\n",
        "EL objetivo es solo precios por lo que operaciones que no sean de comrpa tambien se van.<br />\n",
        "Mis datos son solo de Capital Federal asique voy a filtrar tambien por eso.<br />\n",
        "Estoy buscando precios de abril del 2022 asique en principio podria ver que precios estan viejos. Mi base de datos es de mayo 2021 asique tendre que hacer ajustes con numeros conocidos de evolución de precios.\n",
        "<br />\n",
        "Por ultimo, hay busco datos de barrios especificos asique lo que este por fuera solo añade ruido."
      ],
      "metadata": {
        "id": "xB40jqGL5IE-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.currency.value_counts()"
      ],
      "metadata": {
        "id": "aXduj-Bo4aES",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8f6a8a8f-9391-4ddc-df27-cedb5b9588b2"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "USD    175149\n",
              "Name: currency, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=df[df.currency=='USD']"
      ],
      "metadata": {
        "id": "Dh5nzv8n5h0j"
      },
      "execution_count": 120,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df=df[df.l1=='Argentina']"
      ],
      "metadata": {
        "id": "-yIlP51jWZz6"
      },
      "execution_count": 121,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df=df[df.l2=='Capital Federal']"
      ],
      "metadata": {
        "id": "QznHazIVSQxi"
      },
      "execution_count": 122,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Estos son los barrios que vienen del set de los que quiero predecir."
      ],
      "metadata": {
        "id": "bjOh2gpwKkt3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=['Balvanera', 'Villa Urquiza', 'Palermo', 'Belgrano', 'Floresta',\n",
        "       'Villa Pueyrredon', 'Saavedra', 'Villa Devoto', 'San Nicolás',\n",
        "       'Chacarita', 'Villa Crespo', 'Boedo', 'Flores', 'Paternal', 'Boca',\n",
        "       'Recoleta', 'Caballito', 'Nuñez', 'Constitución', 'Colegiales',\n",
        "       'San Telmo', 'Monserrat', 'Puerto Madero', 'Villa del Parque',\n",
        "       'Almagro', 'Villa Ortuzar', 'Villa Lugano', 'San Cristobal',\n",
        "       'Barracas', 'Liniers', '2 Ambientes', 'Mataderos',\n",
        "       'Villa Santa Rita', 'Parque Patricios', 'Parque Chas',\n",
        "       'Villa General Mitre', 'Retiro', 'Parque Avellaneda',\n",
        "       'Monte Castro', 'Parque Chacabuco', 'Villa Luro', 'Versalles',\n",
        "       'Coghlan', 'Vélez Sarsfield', 'Nueva Pompeya', 'Agronomía',\n",
        "       'Villa Real', 'GBA Norte']"
      ],
      "metadata": {
        "id": "CBgCT4jElLCT"
      },
      "execution_count": 123,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df[df['l3'].isin(a)]"
      ],
      "metadata": {
        "id": "eBNzqZqlk111"
      },
      "execution_count": 124,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# df.to_csv(\"inmoblimpio.csv\")"
      ],
      "metadata": {
        "id": "nGZ1JiJT9hX_"
      },
      "execution_count": 125,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['start_date']=pd.to_datetime(df['start_date'])"
      ],
      "metadata": {
        "id": "UAwS1SeNa5Ai"
      },
      "execution_count": 126,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['start_date'].max()"
      ],
      "metadata": {
        "id": "ES6vG_T3bKUY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e6bf675-5cd3-4c55-e0df-5c9d5365f385"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Timestamp('2021-06-17 00:00:00')"
            ]
          },
          "metadata": {},
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['start_date'].min()"
      ],
      "metadata": {
        "id": "EUMJP9t2e73s",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d1647864-e845-4b44-b688-731fbc43c036"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Timestamp('2020-05-24 00:00:00')"
            ]
          },
          "metadata": {},
          "execution_count": 128
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['end_date'].replace('9999-12-31','2020-12-31', inplace=True)"
      ],
      "metadata": {
        "id": "V1EQS4mCE4j_"
      },
      "execution_count": 129,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['end_date']=pd.to_datetime(df['end_date'])\n",
        "df['end_date'].max()"
      ],
      "metadata": {
        "id": "jVqxVelNb_Mr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a3698005-79a8-4b46-d156-4bb1772865f0"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Timestamp('2021-08-16 00:00:00')"
            ]
          },
          "metadata": {},
          "execution_count": 130
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=df[df.start_date>'2021-01-01']"
      ],
      "metadata": {
        "id": "tmUqhJoSTd0d"
      },
      "execution_count": 131,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Hago un ajuste preliminar de la columna precios."
      ],
      "metadata": {
        "id": "bVAzTwhxcYvd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.l3.unique()"
      ],
      "metadata": {
        "id": "99DGGFrq_HGk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "df0c5d06-42f8-47a2-80a7-d0edc5db8431"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Recoleta', 'Monserrat', 'Balvanera', 'Almagro', 'Palermo',\n",
              "       'San Telmo', 'San Nicolás', 'Villa Crespo', 'Flores', 'Caballito',\n",
              "       'Retiro', 'Floresta', 'Monte Castro', 'Villa General Mitre',\n",
              "       'Villa Urquiza', 'Parque Chacabuco', 'Belgrano', 'Barracas',\n",
              "       'Boedo', 'Nuñez', 'Puerto Madero', 'Coghlan', 'Parque Chas',\n",
              "       'San Cristobal', 'Villa Santa Rita', 'Villa Lugano', 'Saavedra',\n",
              "       'Colegiales', 'Villa Devoto', 'Liniers', 'Boca',\n",
              "       'Parque Avellaneda', 'Mataderos', 'Versalles', 'Villa Real',\n",
              "       'Parque Patricios', 'Villa Ortuzar', 'Villa Luro',\n",
              "       'Villa del Parque', 'Chacarita', 'Constitución', 'Paternal',\n",
              "       'Agronomía'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 132
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.loc[df.l3 == 'Palermo', ['price']]=df.price*0.9\n",
        "df.loc[df.l3 ==  'Belgrano',['price']]=df.price*0.95\n",
        "df.loc[df.l3 == 'Recoleta', ['price']]=df.price*0.87\n",
        "df.loc[df.l3 ==  'Caballito',['price']]=df.price*0.93\n",
        "df.loc[df.l3 == 'Villa Urquiza', ['price']]=df.price*0.9\n",
        "df.loc[df.l3 ==  'Almagro',['price']]=df.price*0.922\n",
        "df.loc[df.l3 == 'Villa Crespo', ['price']]=df.price*0.824\n",
        "df.loc[df.l3 ==  'Nuñez',['price']]=df.price*0.946\n",
        "\n",
        "df.loc[df.l3 == 'Flores', ['price']]=df.price*0.94\n",
        "df.loc[df.l3 ==  'Balvanera',['price']]=df.price*0.95\n",
        "df.loc[df.l3 == 'Puerto Madero', ['price']]=df.price*0.96\n",
        "df.loc[df.l3 ==  'Colegiales',['price']]=df.price*0.91\n",
        "df.loc[df.l3 == 'Saavedra', ['price']]=df.price*0.9\n",
        "df.loc[df.l3 ==  'Villa Devoto',['price']]=df.price*0.922\n",
        "df.loc[df.l3 == 'Floresta', ['price']]=df.price*0.904\n",
        "df.loc[df.l3 ==  'Villa Del Parque',['price']]=df.price*0.894\n",
        "\n",
        "df.loc[df.l3 == 'Retiro', ['price']]=df.price*0.881\n",
        "df.loc[df.l3 ==  'Barracas',['price']]=df.price*1.08\n",
        "df.loc[df.l3 == 'San Cristobal', ['price']]=df.price*0.811\n",
        "df.loc[df.l3 ==  'San Telmo',['price']]=df.price*0.971\n",
        "df.loc[df.l3 == 'Boedo', ['price']]=df.price*0.898\n",
        "df.loc[df.l3 ==  'San Nicolas',['price']]=df.price*0.923\n",
        "df.loc[df.l3 == 'Mataderos', ['price']]=df.price*0.806\n",
        "df.loc[df.l3 ==  'Liniers',['price']]=df.price*0.854\n",
        "\n",
        "df.loc[df.l3 == 'Parque Chacabuco', ['price']]=df.price*0.885\n",
        "df.loc[df.l3 ==  'Coghlan',['price']]=df.price*1.015\n",
        "df.loc[df.l3 == 'Monserrat', ['price']]=df.price*0.951\n",
        "df.loc[df.l3 ==  'Villa Luro',['price']]=df.price*0.867\n",
        "df.loc[df.l3 == 'Parque Patricios', ['price']]=df.price*0.982\n",
        "df.loc[df.l3 ==  'Chacarita',['price']]=df.price*0.845\n",
        "df.loc[df.l3 == 'Villa Ortuzar', ['price']]=df.price*0.89\n",
        "df.loc[df.l3 ==  'Monte Castro',['price']]=df.price*0.959\n",
        "\n",
        "df.loc[df.l3 == 'Constitucion', ['price']]=df.price*0.851\n",
        "df.loc[df.l3 ==  'Paternal',['price']]=df.price*0.907\n",
        "df.loc[df.l3 == 'Villa General Mitre', ['price']]=df.price*1.088\n",
        "df.loc[df.l3 ==  'Boca',['price']]=df.price*0.98\n",
        "df.loc[df.l3 == 'Parque Avellaneda', ['price']]=df.price*0.862\n",
        "df.loc[df.l3 ==  'Villa Santa Rita',['price']]=df.price*1.04\n",
        "df.loc[df.l3 == 'Parque Chas', ['price']]=df.price*0.989\n",
        "df.loc[df.l3 ==  'Versalles',['price']]=df.price*0.936\n",
        "\n",
        "\n",
        "df.loc[df.l3 == 'Agronomia', ['price']]=df.price*0.815\n",
        "df.loc[df.l3 ==  'Villa Real',['price']]=df.price*0.851\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "cBRgo66EcdZ4"
      },
      "execution_count": 133,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.currency.value_counts()"
      ],
      "metadata": {
        "id": "VacXaPUj5yPn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d6156808-3178-4843-a30d-a6f77f63050f"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "USD    71384\n",
              "Name: currency, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=df.drop('l6', axis=1)"
      ],
      "metadata": {
        "id": "jFewIffK4_44"
      },
      "execution_count": 135,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['price_period'].value_counts()"
      ],
      "metadata": {
        "id": "cv9c8hLlAaxE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d2b84f48-b1d6-4be4-abb4-16b261f70405"
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Mensual    42815\n",
              "Name: price_period, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.ad_type.value_counts()"
      ],
      "metadata": {
        "id": "9kQSCmzNFiWI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dc8cc1ca-910d-49f5-e8ae-f967f7a52689"
      },
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Propiedad    71384\n",
              "Name: ad_type, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 137
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Puedo tirar tambien el price period y ad type."
      ],
      "metadata": {
        "id": "_DFrgcCaBPBh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.dropna(subset=['price','lat','lon','l3','title','description','operation_type'], inplace=True)"
      ],
      "metadata": {
        "id": "qZ7NDIA-8M0h"
      },
      "execution_count": 138,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df=df.drop('price_period', axis=1)"
      ],
      "metadata": {
        "id": "LZcda2h3BODI"
      },
      "execution_count": 139,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df=df.drop('ad_type', axis=1)"
      ],
      "metadata": {
        "id": "deFxgd_6GJO-"
      },
      "execution_count": 140,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.operation_type.unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8fw7YH2xhEYq",
        "outputId": "17271b18-ec7e-4873-805e-fe3d94c02b56"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Alquiler', 'Venta', 'Alquiler temporal'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 141
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=df[df.operation_type=='Venta']"
      ],
      "metadata": {
        "id": "1wF3gVwdhQXN"
      },
      "execution_count": 142,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "id": "7sTGyLEDGy97",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "83496056-7c5a-4553-8e47-3647799a7c5e"
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(64282, 21)"
            ]
          },
          "metadata": {},
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h1>Interludio para df_pred"
      ],
      "metadata": {
        "id": "ltUZ3fNIDaSZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h1> Análisis del conjunto de datos\n",
        " <h2> Parte 2 Analisis de datos y creación de features.\n",
        " Aca empiezo a hacer cambios en los datos, podria ya sumar lo que voy a predecir asi los concateno y despues los separo."
      ],
      "metadata": {
        "id": "2_5rvGcqFt_Y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Modifiquemos lat y lon"
      ],
      "metadata": {
        "id": "elfYer_wIMD-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "df['rot_45_x'] = (0.707 * df['lat']) + (0.707 * df['lon'])\n",
        "df['rot_45_y'] = (0.707 * df['lon']) + (0.707 * df['lat'])\n",
        "df['rot_30_x'] = (0.866 * df['lat']) + (0.5 * df['lon'])\n",
        "df['rot_30_y'] = (0.866 * df['lon']) + (0.5 * df['lat'])\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "41VNjibYILze"
      },
      "execution_count": 144,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['start_date']=pd.to_datetime(df['start_date'])\n",
        "df['anio_s']=pd.DatetimeIndex(df['start_date']).year\n",
        "df['mes_s']=pd.DatetimeIndex(df['start_date']).month\n",
        "df['end_date']=pd.to_datetime(df['end_date'])\n",
        "df['anio_e']=pd.DatetimeIndex(df['end_date']).year\n",
        "df['mes_e']=pd.DatetimeIndex(df['end_date']).month\n",
        "df['created_on']=pd.to_datetime(df['created_on'])\n",
        "df['anio_c']=pd.DatetimeIndex(df['created_on']).year\n",
        "df['mes_c']=pd.DatetimeIndex(df['created_on']).month"
      ],
      "metadata": {
        "id": "8-TXcJQJB4Ka"
      },
      "execution_count": 145,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# np.log(df.rooms).plot.hist()"
      ],
      "metadata": {
        "id": "5vdqb06tGNrt"
      },
      "execution_count": 146,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['logr']=np.log(df.rooms+1)"
      ],
      "metadata": {
        "id": "p4NHoogpKggT"
      },
      "execution_count": 147,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.logr.plot.hist()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "EKbKsMD95Ivi",
        "outputId": "0f63aa3c-4240-42ed-98dc-95520e0f8019"
      },
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0fc1c14250>"
            ]
          },
          "metadata": {},
          "execution_count": 148
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.bedrooms.value_counts()"
      ],
      "metadata": {
        "id": "2hytbjhuGqzp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4c91c6d4-80ac-4bd9-a3a1-2c8f18a93037"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              " 1.0      18031\n",
              " 2.0      14669\n",
              " 3.0      10067\n",
              " 0.0       3198\n",
              " 4.0       3009\n",
              " 5.0        542\n",
              " 6.0        196\n",
              " 7.0         46\n",
              " 8.0         36\n",
              " 10.0        16\n",
              " 9.0         15\n",
              " 12.0        14\n",
              " 15.0         8\n",
              " 27.0         5\n",
              " 16.0         4\n",
              " 20.0         4\n",
              " 14.0         4\n",
              " 13.0         4\n",
              " 30.0         3\n",
              " 24.0         3\n",
              " 11.0         3\n",
              " 22.0         2\n",
              " 32.0         2\n",
              " 39.0         2\n",
              " 101.0        2\n",
              " 18.0         2\n",
              " 17.0         2\n",
              " 33.0         1\n",
              " 82.0         1\n",
              " 40.0         1\n",
              " 43.0         1\n",
              " 36.0         1\n",
              "-2.0          1\n",
              " 23.0         1\n",
              " 64.0         1\n",
              " 34.0         1\n",
              " 25.0         1\n",
              " 37.0         1\n",
              " 50.0         1\n",
              "-1.0          1\n",
              "Name: bedrooms, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 149
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# df.bedrooms = np.where(df.bedrooms < 1, 0.1, df.bedrooms)\n",
        "df=df[df.bedrooms>0]"
      ],
      "metadata": {
        "id": "rW8di_wYHLmC"
      },
      "execution_count": 150,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.log(df.bedrooms).plot.hist()"
      ],
      "metadata": {
        "id": "_KnqzsoiJXyM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "6d0ff278-c0ff-47dd-dfeb-382efd3b89da"
      },
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0fc1b9d610>"
            ]
          },
          "metadata": {},
          "execution_count": 151
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['logbed']=np.log(df.bedrooms+1)"
      ],
      "metadata": {
        "id": "ky2GlQpHKmUt"
      },
      "execution_count": 152,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# np.log(df.bathrooms).plot.hist()"
      ],
      "metadata": {
        "id": "LePdKBVhKqSU"
      },
      "execution_count": 153,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.bedrooms.plot.hist()"
      ],
      "metadata": {
        "id": "PSN7rZSQKxSj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "31e9ecc7-9aa7-4d70-8233-114ae5a8db50"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0fc1b01f50>"
            ]
          },
          "metadata": {},
          "execution_count": 154
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['logbath']=np.log(df.bathrooms+1)"
      ],
      "metadata": {
        "id": "cqGuL_rnK0z3"
      },
      "execution_count": 155,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "id": "8FSJqF_32Wcn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fced0c4f-fbde-4d41-ae34-06543186dbdb"
      },
      "execution_count": 156,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(46702, 34)"
            ]
          },
          "metadata": {},
          "execution_count": 156
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.surface_covered.max()"
      ],
      "metadata": {
        "id": "mF_tAmYjK7uK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0966f878-a9e7-4b38-e698-68c57b1b110d"
      },
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "123000.0"
            ]
          },
          "metadata": {},
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.surface_covered[df.surface_covered.between(df.surface_covered.quantile(.0), df.surface_covered.quantile(.85))].plot.hist()"
      ],
      "metadata": {
        "id": "monkLgNvMw_Y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "934adec1-ad2c-40ae-babd-99a5287b03a9"
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0fc1a2d950>"
            ]
          },
          "metadata": {},
          "execution_count": 158
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Limpio algunos outliers de superficie cubierta."
      ],
      "metadata": {
        "id": "StGYBXGl2FDN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.surface_covered.value_counts();"
      ],
      "metadata": {
        "id": "Y1Yi3Jx_2nEy"
      },
      "execution_count": 159,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.log(df.surface_covered).plot.hist()"
      ],
      "metadata": {
        "id": "_EDNaRQX17__",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "3ff5ca1d-5dfd-4f84-b5e5-9895fe252879"
      },
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0fc19b0690>"
            ]
          },
          "metadata": {},
          "execution_count": 160
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['logsupcov']=np.log(df.surface_covered+1)"
      ],
      "metadata": {
        "id": "zfSBqgCR33yK"
      },
      "execution_count": 161,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "id": "LO5QQpDa3Jwh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9dfc19e0-854c-4ef4-af9d-1cf73782d957"
      },
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(46702, 35)"
            ]
          },
          "metadata": {},
          "execution_count": 162
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# df=df[df.surface_covered<df.surface_covered.quantile(.9999)]\n",
        "# df.surface_covered.plot.hist()\n",
        "\n",
        "# df.shape (405996, 24) de original (834056, 24)\n"
      ],
      "metadata": {
        "id": "xTYH2jLs1T4d"
      },
      "execution_count": 163,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.log(df.surface_total).plot.hist()"
      ],
      "metadata": {
        "id": "K4gsEmGy4DZ_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "d7f3d240-cca4-4f52-912e-4a727020cbe3"
      },
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0fc19a7a10>"
            ]
          },
          "metadata": {},
          "execution_count": 164
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZEAAAD4CAYAAAAtrdtxAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAUy0lEQVR4nO3df/BddX3n8efLRASsEpAsqwnbpGsGJ1K70hTYddrpmhYCWMLOqourNWLG7G6p1bYzCnZncVR2cNoVcVtpsxANlvKjSEu2oBgR6+yM/Ag/BvlRSoYfkgjyrUGwYqHR9/5xP4Fr+H7JzUnuvflyn4+Z73zPeZ9z7nmfO+T74pzzOfemqpAkqYuXjLsBSdLsZYhIkjozRCRJnRkikqTODBFJUmdzx93AqB166KG1aNGicbchSbPKLbfc8g9VNX/n+sSFyKJFi9i0adO425CkWSXJQ9PVvZwlSerMEJEkdWaISJI6M0QkSZ0ZIpKkzgwRSVJnhogkqTNDRJLUmSEiSeps4p5Yn40WnXH12Pb94DknjW3fkvZ9nolIkjozRCRJnRkikqTOhhYiSdYleSzJnX21P0zyd0nuSPJXSeb1LTszyeYk9yY5vq++otU2Jzmjr744yY2tflmS/YZ1LJKk6Q3zTOTzwIqdahuBI6vqDcDfA2cCJFkKnAq8vm3z2SRzkswB/gQ4AVgKvKOtC/BJ4Nyqei3wOLB6iMciSZrG0EZnVdU3kizaqfaVvtkbgLe26ZXApVX1NPBAks3A0W3Z5qq6HyDJpcDKJPcAbwb+c1tnPfBR4Py9fySTbVwjwxwVJs0O47wn8l7gS216AfBw37ItrTZT/VXA96tq+071aSVZk2RTkk1TU1N7qX1J0lhCJMkfANuBi0exv6paW1XLqmrZ/PnP+3ZHSVJHI3/YMMl7gLcAy6uqWnkrcHjfagtbjRnq3wPmJZnbzkb615ckjchIz0SSrAA+BJxcVU/1LdoAnJrkZUkWA0uAm4CbgSVtJNZ+9G6+b2jhcz3P3VNZBVw1quOQJPUMc4jvJcA3gSOSbEmyGvhj4BXAxiS3J/lTgKq6C7gcuBv4MnB6Vf24nWX8NnAtcA9weVsX4MPA77Wb8K8CLhzWsUiSpjfM0VnvmKY84x/6qjobOHua+jXANdPU7+e5EVySpDHwiXVJUmeGiCSpM0NEktSZISJJ6swQkSR1ZohIkjozRCRJnRkikqTODBFJUmeGiCSpM0NEktSZISJJ6swQkSR1ZohIkjozRCRJnRkikqTODBFJUmeGiCSpM0NEktSZISJJ6swQkSR1ZohIkjozRCRJnRkikqTOhhYiSdYleSzJnX21Q5JsTHJf+31wqyfJZ5JsTnJHkqP6tlnV1r8vyaq++i8m+Vbb5jNJMqxjkSRNb5hnIp8HVuxUOwO4rqqWANe1eYATgCXtZw1wPvRCBzgLOAY4GjhrR/C0dd7Xt93O+5IkDdnQQqSqvgFs26m8EljfptcDp/TVL6qeG4B5SV4NHA9srKptVfU4sBFY0Za9sqpuqKoCLup7LUnSiIz6nshhVfVIm34UOKxNLwAe7ltvS6u9UH3LNHVJ0giN7cZ6O4OoUewryZokm5JsmpqaGsUuJWkijDpEvtsuRdF+P9bqW4HD+9Zb2GovVF84TX1aVbW2qpZV1bL58+fv8UFIknpGHSIbgB0jrFYBV/XV391GaR0LPNEue10LHJfk4HZD/Tjg2rbsySTHtlFZ7+57LUnSiMwd1gsnuQT4VeDQJFvojbI6B7g8yWrgIeDtbfVrgBOBzcBTwGkAVbUtyceBm9t6H6uqHTfrf4veCLADgC+1H0nSCA0tRKrqHTMsWj7NugWcPsPrrAPWTVPfBBy5Jz1KkvaMT6xLkjozRCRJnRkikqTODBFJUmeGiCSpM0NEktSZISJJ6swQkSR1ZohIkjozRCRJnRkikqTODBFJUmeGiCSpM0NEktSZISJJ6swQkSR1ZohIkjozRCRJnRkikqTODBFJUmeGiCSpM0NEktSZISJJ6swQkSR1ZohIkjobS4gk+d0kdyW5M8klSfZPsjjJjUk2J7ksyX5t3Ze1+c1t+aK+1zmz1e9Ncvw4jkWSJtnIQyTJAuB3gGVVdSQwBzgV+CRwblW9FngcWN02WQ083urntvVIsrRt93pgBfDZJHNGeSySNOnGdTlrLnBAkrnAgcAjwJuBK9ry9cApbXplm6ctX54krX5pVT1dVQ8Am4GjR9S/JIkxhEhVbQX+CPg2vfB4ArgF+H5VbW+rbQEWtOkFwMNt2+1t/Vf116fZ5qckWZNkU5JNU1NTe/eAJGmCDRQiSX5+b+0wycH0ziIWA68BXk7vctTQVNXaqlpWVcvmz58/zF1J0kQZ9Ezks0luSvJbSQ7aw33+GvBAVU1V1T8DVwJvAua1y1sAC4GtbXorcDhAW34Q8L3++jTbSJJGYKAQqapfBt5J74/2LUn+Ismvd9znt4FjkxzY7m0sB+4Grgfe2tZZBVzVpje0edryr1VVtfqpbfTWYmAJcFPHniRJHczd9So9VXVfkv8ObAI+A7yxhcBHqurK3XidG5NcAdwKbAduA9YCVwOXJvlEq13YNrkQ+EKSzcA2eiOyqKq7klxOL4C2A6dX1Y8H7UOStOcGCpEkbwBOA04CNgK/UVW3JnkN8E16l6QGVlVnAWftVL6faUZXVdU/AW+b4XXOBs7enX1LkvaeQc9E/jdwAb2zjh/tKFbVd9rZiSRpAg0aIicBP9pxuSjJS4D9q+qpqvrC0LqTJO3TBh2d9VXggL75A1tNkjTBBg2R/avqH3fMtOkDh9OSJGm2GDREfpjkqB0zSX4R+NELrC9JmgCD3hP5IPCXSb4DBPiXwH8aWleSpFlhoBCpqpuTvA44opXubU+bS5Im2MAPGwK/BCxq2xyVhKq6aChdSZJmhUEfNvwC8K+B24EdT4UXYIhI0gQb9ExkGbC0fWaVJEnA4KOz7qR3M12SpGcNeiZyKHB3kpuAp3cUq+rkoXQlSZoVBg2Rjw6zCUnS7DToEN+/TfKzwJKq+mqSA4E5w21NkrSvG/Trcd8HXAH8WSstAP56WE1JkmaHQW+sn07vK2yfhN4XVAH/YlhNSZJmh0FD5OmqembHTPuuc4f7StKEGzRE/jbJR4AD2ner/yXwf4fXliRpNhg0RM4ApoBvAf8FuAbwGw0lacINOjrrJ8D/aT+SJAGDf3bWA0xzD6Sqfm6vdyRJmjV257OzdtgfeBtwyN5vR5I0mwx0T6Sqvtf3s7WqPg2cNOTeJEn7uEEvZx3VN/sSemcmu/NdJJKkF6FBg+B/9U1vBx4E3t51p0nmARcAR9K71/Je4F7gMnpffPUg8PaqejxJgPOAE4GngPdU1a3tdVbx3CixT1TV+q49SZJ236Cjs/79Xt7vecCXq+qtSfYDDgQ+AlxXVeckOYPesOIPAycAS9rPMcD5wDFJDgHOondWVMAtSTZU1eN7uVdJ0gwGvZz1ey+0vKo+NegOkxwE/ArwnrbtM8AzSVYCv9pWWw98nV6IrAQual+IdUOSeUle3dbdWFXb2utuBFYAlwzaiyRpzwz6sOEy4L/R++DFBcB/BY4CXtF+dsdieg8ufi7JbUkuSPJy4LCqeqSt8yhwWJteADzct/2Wvj6mqz9PkjVJNiXZNDU1tZvtSpJmMug9kYXAUVX1A4AkHwWurqp3ddznUcD7q+rGJOfRu3T1rKqqJHvts7mqai2wFmDZsmV+5pck7SWDnokcBjzTN/8Mz50p7K4twJaqurHNX0EvVL7bLlPRfj/Wlm8FDu/bfmGrzVSXJI3IoCFyEXBTko+2s5Ab6d232G1V9SjwcJIjWmk5cDewAVjVaquAq9r0BuDd6TkWeKJd9roWOC7JwUkOBo5rNUnSiAw6OuvsJF8CfrmVTquq2/Zgv+8HLm4js+4HTqMXaJcnWQ08xHNDiK+hN7x3M70hvqe1nrYl+Thwc1vvYztuskuSRmN3Hhg8EHiyqj6XZH6SxVX1QJedVtXt/PRHqeywfJp1i96XYk33OuuAdV16kCTtuUG/HvcsesNtz2yllwJ/PqymJEmzw6D3RP4DcDLwQ4Cq+g67P7RXkvQiM2iIPNMuKxVAe65DkjThBg2Ry5P8GTAvyfuAr+IXVEnSxNvljfX2AYiXAa8DngSOAP5HVW0ccm+SpH3cLkOkPT1+TVX9PGBwSJKeNejlrFuT/NJQO5EkzTqDPidyDPCuJA/SG6EVeicpbxhWY5Kkfd8LhkiSf1VV3waOH1E/kqRZZFdnIn9N79N7H0ryxar6j6NoSpI0O+zqnkj6pn9umI1IkmafXYVIzTAtSdIuL2f9QpIn6Z2RHNCm4bkb668caneSpH3aC4ZIVc0ZVSOSpNln0OdEJEl6HkNEktSZISJJ6swQkSR1ZohIkjozRCRJnRkikqTODBFJUmeGiCSpM0NEktTZ2EIkyZwktyX5mza/OMmNSTYnuSzJfq3+sja/uS1f1PcaZ7b6vUn8zhNJGrFxnol8ALinb/6TwLlV9VrgcWB1q68GHm/1c9t6JFkKnAq8HlgBfDaJn/UlSSM0lhBJshA4CbigzQd4M3BFW2U9cEqbXtnmacuXt/VXApdW1dNV9QCwGTh6NEcgSYLxnYl8GvgQ8JM2/yrg+1W1vc1vARa06QXAwwBt+RNt/Wfr02zzU5KsSbIpyaapqam9eRySNNFGHiJJ3gI8VlW3jGqfVbW2qpZV1bL58+ePareS9KK3qy+lGoY3AScnORHYH3glcB4wL8ncdraxENja1t8KHA5sSTIXOAj4Xl99h/5tJEkjMPIzkao6s6oWVtUiejfGv1ZV7wSuB97aVlsFXNWmN7R52vKvVVW1+qlt9NZiYAlw04gOQ5LEeM5EZvJh4NIknwBuAy5s9QuBLyTZDGyjFzxU1V1JLgfuBrYDp1fVj0fftiRNrrGGSFV9Hfh6m76faUZXVdU/AW+bYfuzgbOH16Ek6YX4xLokqTNDRJLUmSEiSerMEJEkdWaISJI625eG+ErPWnTG1WPb94PnnDS2fUuzjWcikqTODBFJUmeGiCSpM0NEktSZISJJ6swQkSR1ZohIkjozRCRJnRkikqTODBFJUmeGiCSpM0NEktSZISJJ6swQkSR1ZohIkjozRCRJnRkikqTODBFJUmcjD5Ekhye5PsndSe5K8oFWPyTJxiT3td8Ht3qSfCbJ5iR3JDmq77VWtfXvS7Jq1MciSZNuHGci24Hfr6qlwLHA6UmWAmcA11XVEuC6Ng9wArCk/awBzode6ABnAccARwNn7QgeSdJojDxEquqRqrq1Tf8AuAdYAKwE1rfV1gOntOmVwEXVcwMwL8mrgeOBjVW1raoeBzYCK0Z4KJI08cZ6TyTJIuCNwI3AYVX1SFv0KHBYm14APNy32ZZWm6kuSRqRsYVIkp8Bvgh8sKqe7F9WVQXUXtzXmiSbkmyampraWy8rSRNvLCGS5KX0AuTiqrqylb/bLlPRfj/W6luBw/s2X9hqM9Wfp6rWVtWyqlo2f/78vXcgkjThxjE6K8CFwD1V9am+RRuAHSOsVgFX9dXf3UZpHQs80S57XQscl+TgdkP9uFaTJI3I3DHs803AbwLfSnJ7q30EOAe4PMlq4CHg7W3ZNcCJwGbgKeA0gKraluTjwM1tvY9V1bbRHIIkCcYQIlX1/4DMsHj5NOsXcPoMr7UOWLf3upMk7Q6fWJckdWaISJI6M0QkSZ0ZIpKkzgwRSVJnhogkqTNDRJLUmSEiSerMEJEkdWaISJI6M0QkSZ0ZIpKkzgwRSVJnhogkqTNDRJLUmSEiSerMEJEkdWaISJI6M0QkSZ0ZIpKkzgwRSVJnhogkqbO5425A2tcsOuPqsez3wXNOGst+pT3hmYgkqTNDRJLU2ay/nJVkBXAeMAe4oKrOGda+xnWZQ5L2VbP6TCTJHOBPgBOApcA7kiwdb1eSNDlm+5nI0cDmqrofIMmlwErg7rF2JXUwiWe6DiaY/WZ7iCwAHu6b3wIcs/NKSdYAa9rsPya5d6dVDgX+YSgdzh6T/h5M+vHDGN6DfHKUexvIpP938ELH/7PTFWd7iAykqtYCa2danmRTVS0bYUv7nEl/Dyb9+MH3AHwPuhz/rL4nAmwFDu+bX9hqkqQRmO0hcjOwJMniJPsBpwIbxtyTJE2MWX05q6q2J/lt4Fp6Q3zXVdVdHV5qxktdE2TS34NJP37wPQDfg90+/lTVMBqRJE2A2X45S5I0RoaIJKmziQ6RJIcnuT7J3UnuSvKBcfc0DknmJLktyd+Mu5dxSDIvyRVJ/i7JPUn+7bh7GrUkv9v+DdyZ5JIk+4+7p2FLsi7JY0nu7KsdkmRjkvva74PH2eMwzXD8f9j+HdyR5K+SzNvV60x0iADbgd+vqqXAscDpE/qxKR8A7hl3E2N0HvDlqnod8AtM2HuRZAHwO8CyqjqS3iCVU8fb1Uh8HlixU+0M4LqqWgJc1+ZfrD7P849/I3BkVb0B+HvgzF29yESHSFU9UlW3tukf0PvjsWC8XY1WkoXAScAF4+5lHJIcBPwKcCFAVT1TVd8fb1djMRc4IMlc4EDgO2PuZ+iq6hvAtp3KK4H1bXo9cMpImxqh6Y6/qr5SVdvb7A30nr17QRMdIv2SLALeCNw43k5G7tPAh4CfjLuRMVkMTAGfa5f0Lkjy8nE3NUpVtRX4I+DbwCPAE1X1lfF2NTaHVdUjbfpR4LBxNjNm7wW+tKuVDBEgyc8AXwQ+WFVPjrufUUnyFuCxqrpl3L2M0VzgKOD8qnoj8ENe3Jcwnqdd919JL1BfA7w8ybvG29X4Ve/5h4l8BiLJH9C73H/xrtad+BBJ8lJ6AXJxVV057n5G7E3AyUkeBC4F3pzkz8fb0shtAbZU1Y4z0Cvohcok+TXggaqaqqp/Bq4E/t2YexqX7yZ5NUD7/diY+xm5JO8B3gK8swZ4kHCiQyRJ6F0Lv6eqPjXufkatqs6sqoVVtYjejdSvVdVE/R9oVT0KPJzkiFZazuR9lcC3gWOTHNj+TSxnwgYX9NkArGrTq4CrxtjLyLUv+fsQcHJVPTXINhMdIvT+T/w36f0f+O3t58RxN6WRez9wcZI7gH8D/M8x9zNS7SzsCuBW4Fv0/i686D/+I8klwDeBI5JsSbIaOAf49ST30TtDG9o3pY7bDMf/x8ArgI3t7+Gf7vJ1/NgTSVJXk34mIknaA4aIJKkzQ0SS1JkhIknqzBCRJHVmiEiSOjNEJEmd/X8ipdYkhUyZVAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.surface_total.plot.hist()"
      ],
      "metadata": {
        "id": "nWMc6Cf94RPr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "555dc47a-deb1-4436-dddb-b7cfc4b0762b"
      },
      "execution_count": 165,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0fc38d6bd0>"
            ]
          },
          "metadata": {},
          "execution_count": 165
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['logsuptot']=np.log(df.surface_total+1)"
      ],
      "metadata": {
        "id": "qWRozk8g4VTD"
      },
      "execution_count": 166,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.l2.unique()"
      ],
      "metadata": {
        "id": "yJDIMNJZ9h13",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c7f0db46-c72c-474d-e325-8376d9ad893d"
      },
      "execution_count": 167,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Capital Federal'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 167
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.l1.unique()"
      ],
      "metadata": {
        "id": "62DK8W8iU92t",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6ecfddf9-3faa-473d-d0eb-b32dce7c1537"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Argentina'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 168
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.l3.value_counts()"
      ],
      "metadata": {
        "id": "bd9XJ0oz9kwn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b75d97dc-700d-454e-f881-debb1bc4630a"
      },
      "execution_count": 169,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Belgrano               8330\n",
              "Palermo                6606\n",
              "Caballito              3278\n",
              "Recoleta               2927\n",
              "Villa Urquiza          2715\n",
              "Almagro                1802\n",
              "Villa Crespo           1592\n",
              "Flores                 1458\n",
              "Nuñez                  1437\n",
              "Balvanera              1320\n",
              "Colegiales             1133\n",
              "Saavedra                911\n",
              "Villa Devoto            899\n",
              "Floresta                800\n",
              "Villa del Parque        789\n",
              "Barracas                731\n",
              "Puerto Madero           719\n",
              "San Cristobal           676\n",
              "Retiro                  648\n",
              "Boedo                   625\n",
              "San Telmo               606\n",
              "San Nicolás             596\n",
              "Mataderos               535\n",
              "Liniers                 491\n",
              "Parque Chacabuco        438\n",
              "Coghlan                 429\n",
              "Monserrat               426\n",
              "Villa Luro              403\n",
              "Villa Lugano            354\n",
              "Parque Patricios        338\n",
              "Chacarita               304\n",
              "Villa Ortuzar           293\n",
              "Monte Castro            260\n",
              "Constitución            255\n",
              "Paternal                240\n",
              "Villa General Mitre     237\n",
              "Boca                    209\n",
              "Parque Avellaneda       207\n",
              "Villa Santa Rita        200\n",
              "Parque Chas             160\n",
              "Versalles               142\n",
              "Agronomía               108\n",
              "Villa Real               75\n",
              "Name: l3, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 169
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.property_type.unique()"
      ],
      "metadata": {
        "id": "B8APtRu3-x6y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d7fae94a-f1df-4b91-b81e-5aa730b976dd"
      },
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Departamento', 'Oficina', 'PH', 'Casa', 'Otro', 'Lote',\n",
              "       'Local comercial', 'Cochera', 'Depósito', 'Casa de campo'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 170
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Nuevo\"] = df[\"description\"].str.lower().str.contains(\"excel\")\n",
        "\n",
        "df[\"1am\"] = df[\"description\"].str.lower().str.contains(\"1 ambiente\")\n",
        "df[\"2am\"] = df[\"description\"].str.lower().str.contains(\"2 ambiente\")\n",
        "df[\"3am\"] = df[\"description\"].str.lower().str.contains(\"3 ambiente\")\n",
        "df[\"4am\"] = df[\"description\"].str.lower().str.contains(\"4 ambiente\")\n",
        "\n",
        "df[\"Patio\"] = df[\"description\"].str.lower().str.contains(\"patio\")\n",
        "df[\"Balcon\"] = df[\"description\"].str.lower().str.contains(\"balcon\")\n",
        "df[\"Pileta\"] = df[\"description\"].str.lower().str.contains(\"pileta\")\n",
        "df[\"Reciclado\"] = df[\"description\"].str.lower().str.contains(\"reciclado\")\n",
        "\n",
        "df[\"cocina\"] = df[\"description\"].str.lower().str.contains(\"cocina\")\n",
        "df[\"escri\"] = df[\"description\"].str.lower().str.contains(\"escritorio\")\n",
        "df[\"apto\"] = df[\"description\"].str.lower().str.contains(\"apto profesional\")\n",
        "df[\"laundry\"] = df[\"description\"].str.lower().str.contains(\"laundry\")\n",
        "df[\"parri\"] = df[\"description\"].str.lower().str.contains(\"parrilla\")"
      ],
      "metadata": {
        "id": "ot_gPA5BL85w"
      },
      "execution_count": 171,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.Nuevo.value_counts()"
      ],
      "metadata": {
        "id": "WKv-WqcgZM77",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1107d811-a8f2-44cf-96e6-c876599ed379"
      },
      "execution_count": 172,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True     23373\n",
              "False    23329\n",
              "Name: Nuevo, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 172
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['1am'].value_counts()"
      ],
      "metadata": {
        "id": "K6bJIjL_Wjrs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "db92e5ce-3f81-47f3-84b1-effa42c5d634"
      },
      "execution_count": 173,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    46061\n",
              "True       641\n",
              "Name: 1am, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 173
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['2am'].value_counts()"
      ],
      "metadata": {
        "id": "3lW_C_xEWrxS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "600eb762-2d36-4cca-b077-05977aeea2aa"
      },
      "execution_count": 174,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    35950\n",
              "True     10752\n",
              "Name: 2am, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 174
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['3am'].value_counts()"
      ],
      "metadata": {
        "id": "vZDzg0U8WuKr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a3293d73-1302-43b8-f020-815f2fe99891"
      },
      "execution_count": 175,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    35909\n",
              "True     10793\n",
              "Name: 3am, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 175
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['4am'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EIVukwQYdmMV",
        "outputId": "233cf21c-971f-4016-eb8d-451fb2a1a0b5"
      },
      "execution_count": 176,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    40042\n",
              "True      6660\n",
              "Name: 4am, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 176
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Patio'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ATV01r1NdzOV",
        "outputId": "2cf59bfd-854e-476a-deda-ea71d9897a99"
      },
      "execution_count": 177,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    38179\n",
              "True      8523\n",
              "Name: Patio, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 177
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Balcon'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qUfCwCcmeQ9G",
        "outputId": "3fe6a245-33a5-4500-80e1-f0f4bf86fa01"
      },
      "execution_count": 178,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    35133\n",
              "True     11569\n",
              "Name: Balcon, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 178
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Pileta'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-KwXqlibeYqK",
        "outputId": "0b5726d7-5fda-4fcc-9a07-1109cbfe129b"
      },
      "execution_count": 179,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    41826\n",
              "True      4876\n",
              "Name: Pileta, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 179
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Reciclado'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JRMjwTBFejHq",
        "outputId": "60323a98-e9f1-4ab7-9542-ee816c006750"
      },
      "execution_count": 180,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    41660\n",
              "True      5042\n",
              "Name: Reciclado, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 180
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Algunas cuentitas:"
      ],
      "metadata": {
        "id": "3GGe6TV2Y8fu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"parri\"] = df[\"description\"].str.lower().str.contains(\"parrilla\")"
      ],
      "metadata": {
        "id": "P5jIJmMw8PhJ"
      },
      "execution_count": 181,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['parri'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e7e3hViY8Wvo",
        "outputId": "830bb1c7-4b8d-4666-a9a3-41966be524ec"
      },
      "execution_count": 182,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    34339\n",
              "True     12363\n",
              "Name: parri, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 182
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['r/sup']=df['rooms']/df['surface_covered']"
      ],
      "metadata": {
        "id": "tkuHKcqSY8Vq"
      },
      "execution_count": 183,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.log((df.bedrooms/df.rooms)+1).plot.hist()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "Wkl8cKV07RkS",
        "outputId": "ca792dd8-d916-46e3-bbe2-15cf983e8546"
      },
      "execution_count": 184,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0fc4818ed0>"
            ]
          },
          "metadata": {},
          "execution_count": 184
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tratamiento de los datos"
      ],
      "metadata": {
        "id": "zjaTnfxkyvo8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "id": "HS7UYzFNOvAr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "422909a6-908f-4ee6-f76d-86ee097f30f3"
      },
      "execution_count": 185,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 46702 entries, MZ5qRJ730rzfdiow7rT9Pg== to YlLn73RCQP4pM51jaWJtNg==\n",
            "Data columns (total 51 columns):\n",
            " #   Column           Non-Null Count  Dtype         \n",
            "---  ------           --------------  -----         \n",
            " 0   start_date       46702 non-null  datetime64[ns]\n",
            " 1   end_date         46702 non-null  datetime64[ns]\n",
            " 2   created_on       46702 non-null  datetime64[ns]\n",
            " 3   lat              46702 non-null  float64       \n",
            " 4   lon              46702 non-null  float64       \n",
            " 5   l1               46702 non-null  object        \n",
            " 6   l2               46702 non-null  object        \n",
            " 7   l3               46702 non-null  object        \n",
            " 8   l4               1520 non-null   object        \n",
            " 9   l5               0 non-null      float64       \n",
            " 10  rooms            43971 non-null  float64       \n",
            " 11  bedrooms         46702 non-null  float64       \n",
            " 12  bathrooms        45542 non-null  float64       \n",
            " 13  surface_total    28481 non-null  float64       \n",
            " 14  surface_covered  29426 non-null  float64       \n",
            " 15  price            46702 non-null  float64       \n",
            " 16  currency         46702 non-null  object        \n",
            " 17  title            46702 non-null  object        \n",
            " 18  description      46702 non-null  object        \n",
            " 19  property_type    46702 non-null  object        \n",
            " 20  operation_type   46702 non-null  object        \n",
            " 21  rot_45_x         46702 non-null  float64       \n",
            " 22  rot_45_y         46702 non-null  float64       \n",
            " 23  rot_30_x         46702 non-null  float64       \n",
            " 24  rot_30_y         46702 non-null  float64       \n",
            " 25  anio_s           46702 non-null  int64         \n",
            " 26  mes_s            46702 non-null  int64         \n",
            " 27  anio_e           46702 non-null  int64         \n",
            " 28  mes_e            46702 non-null  int64         \n",
            " 29  anio_c           46702 non-null  int64         \n",
            " 30  mes_c            46702 non-null  int64         \n",
            " 31  logr             43971 non-null  float64       \n",
            " 32  logbed           46702 non-null  float64       \n",
            " 33  logbath          45542 non-null  float64       \n",
            " 34  logsupcov        29426 non-null  float64       \n",
            " 35  logsuptot        28481 non-null  float64       \n",
            " 36  Nuevo            46702 non-null  bool          \n",
            " 37  1am              46702 non-null  bool          \n",
            " 38  2am              46702 non-null  bool          \n",
            " 39  3am              46702 non-null  bool          \n",
            " 40  4am              46702 non-null  bool          \n",
            " 41  Patio            46702 non-null  bool          \n",
            " 42  Balcon           46702 non-null  bool          \n",
            " 43  Pileta           46702 non-null  bool          \n",
            " 44  Reciclado        46702 non-null  bool          \n",
            " 45  cocina           46702 non-null  bool          \n",
            " 46  escri            46702 non-null  bool          \n",
            " 47  apto             46702 non-null  bool          \n",
            " 48  laundry          46702 non-null  bool          \n",
            " 49  parri            46702 non-null  bool          \n",
            " 50  r/sup            29158 non-null  float64       \n",
            "dtypes: bool(14), datetime64[ns](3), float64(19), int64(6), object(9)\n",
            "memory usage: 14.2+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "id": "h_0l_7JYFama",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c481f387-d4d6-48d7-9bfe-e3d34e81da04"
      },
      "execution_count": 186,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['start_date', 'end_date', 'created_on', 'lat', 'lon', 'l1', 'l2', 'l3',\n",
              "       'l4', 'l5', 'rooms', 'bedrooms', 'bathrooms', 'surface_total',\n",
              "       'surface_covered', 'price', 'currency', 'title', 'description',\n",
              "       'property_type', 'operation_type', 'rot_45_x', 'rot_45_y', 'rot_30_x',\n",
              "       'rot_30_y', 'anio_s', 'mes_s', 'anio_e', 'mes_e', 'anio_c', 'mes_c',\n",
              "       'logr', 'logbed', 'logbath', 'logsupcov', 'logsuptot', 'Nuevo', '1am',\n",
              "       '2am', '3am', '4am', 'Patio', 'Balcon', 'Pileta', 'Reciclado', 'cocina',\n",
              "       'escri', 'apto', 'laundry', 'parri', 'r/sup'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 186
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Modelización"
      ],
      "metadata": {
        "id": "i2jRJmQ-tD4Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "# Separate target from predictors\n",
        "numerical_cols=['rooms', 'bedrooms', 'bathrooms','r/sup']\n",
        "numerical_cols2=['logsuptot', 'logsupcov']\n",
        "numerical_cols3=['rot_45_x', 'rot_45_y', 'rot_30_x',\n",
        "       'rot_30_y']\n",
        "categorical_cols=['l3','property_type',\"Nuevo\",'1am','2am','3am','4am', 'Patio', 'Balcon', 'Pileta', 'Reciclado','cocina',\n",
        "       'escri', 'apto', 'laundry', 'parri']\n",
        "my_cols = categorical_cols + numerical_cols + numerical_cols2 + numerical_cols3\n",
        "y = df.price\n",
        "X = df[my_cols]\n",
        "# X = df.drop(['price'], axis=1)\n",
        "\n",
        "# Divide data into training and validation subsets\n",
        "X_train_full, X_valid_full, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,random_state=42)\n",
        "\n",
        "\n",
        "                                                                \n",
        "\n",
        "X_train = X_train_full[my_cols].copy()\n",
        "X_valid = X_valid_full[my_cols].copy()"
      ],
      "metadata": {
        "id": "iGQiXenAAGSX"
      },
      "execution_count": 195,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def log_transform(x):\n",
        "    return np.log(x + 1)"
      ],
      "metadata": {
        "id": "_Fu2KNNg9MZX"
      },
      "execution_count": 196,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.preprocessing import RobustScaler\n",
        "from sklearn.preprocessing import FunctionTransformer\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "\n",
        "# Preprocessing for numerical data\n",
        "scaler = StandardScaler()\n",
        "scaler2 = RobustScaler()\n",
        "# Define a pipeline to search for the best combination of PCA truncation\n",
        "# and classifier regularization.\n",
        "\n",
        "\n",
        "\n",
        "transformer = FunctionTransformer(log_transform)\n",
        "numerical_transformer = Pipeline(steps=[('numimputer', SimpleImputer(strategy='mean')),\n",
        "                                        ('scaler', scaler)])\n",
        "# Preprocessing for numerical data 2\n",
        "numerical_transformer2 = Pipeline(steps=[('numimputer2', SimpleImputer(strategy='mean'))]\n",
        "                                        )\n",
        "\n",
        "# Preprocessing for categorical data\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore')),\n",
        "])\n",
        "\n",
        "# Bundle preprocessing for numerical and categorical data\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numerical_transformer, numerical_cols),\n",
        "         ('num2', numerical_transformer2, numerical_cols2),\n",
        "        #  ('num3', numerical_transformer3, numerical_cols3),\n",
        "        ('cat', categorical_transformer, categorical_cols)\n",
        "    ])"
      ],
      "metadata": {
        "id": "fbVoAKtT-VEE"
      },
      "execution_count": 197,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "model = RandomForestRegressor(n_estimators=200,max_depth=10, random_state=42, n_jobs=-1)\n"
      ],
      "metadata": {
        "id": "Yd5xRFfJ_RG9"
      },
      "execution_count": 198,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "QFBt1IB-nNfr"
      },
      "execution_count": 198,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "id": "EABa6PVMYZHB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fc3b44af-16fe-42ac-f98e-7f87caf1b107"
      },
      "execution_count": 199,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(46702, 51)"
            ]
          },
          "metadata": {},
          "execution_count": 199
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error\n",
        "# Bundle preprocessing and modeling code in a pipeline\n",
        "my_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                              ('model', model)\n",
        "                             ])\n",
        "\n",
        "# # Preprocessing of training data, fit model \n",
        "my_pipeline.fit(X_train, y_train)\n",
        "\n",
        "# # Preprocessing of validation data, get predictions\n",
        "preds = my_pipeline.predict(X_valid)\n",
        "\n",
        "# Evaluate the model\n",
        "score = sk.model_selection.cross_val_score(my_pipeline, X_train, y=y_train, cv=4, scoring='neg_root_mean_squared_error',error_score='raise')\n",
        "# score = mean_absolute_error(y_valid, preds)\n",
        "\n",
        "print('Score:', score)"
      ],
      "metadata": {
        "id": "xp4hyegT9dVt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "56e93b28-1577-4be0-ac8c-85e9c844a19f"
      },
      "execution_count": 200,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Score: [-200786.58990335 -229841.93465556 -246763.38310907 -260541.98976807]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "score2 = mean_absolute_error(y_valid, preds)\n",
        "print('Score2:', score2)"
      ],
      "metadata": {
        "id": "y_jGLsJ8Y_A9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aa4218d9-b802-400e-854a-eea6955a2d01"
      },
      "execution_count": 201,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Score2: 58179.50828445467\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "math.sqrt(score2)"
      ],
      "metadata": {
        "id": "LT38e9SmJwnJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "beb85fb1-6c71-4f71-ed4b-dbd54db65ef7"
      },
      "execution_count": 202,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "241.2042874503989"
            ]
          },
          "metadata": {},
          "execution_count": 202
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr_matrix = df.corr()"
      ],
      "metadata": {
        "id": "ic3XRHtZoxFx"
      },
      "execution_count": 203,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "corr_matrix['price'].sort_values(ascending=False)"
      ],
      "metadata": {
        "id": "jl_dEZG-o3t4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d22af21c-b4f0-4f53-cc02-42311b6aef11"
      },
      "execution_count": 204,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "price              1.000000\n",
              "logsupcov          0.621402\n",
              "logsuptot          0.590472\n",
              "bathrooms          0.536886\n",
              "logbath            0.514712\n",
              "rooms              0.452674\n",
              "logr               0.445227\n",
              "logbed             0.414577\n",
              "bedrooms           0.346164\n",
              "escri              0.231279\n",
              "rot_30_x           0.206481\n",
              "rot_45_x           0.200426\n",
              "rot_45_y           0.200426\n",
              "rot_30_y           0.180638\n",
              "lat                0.149395\n",
              "Pileta             0.131677\n",
              "surface_total      0.130312\n",
              "lon                0.123500\n",
              "surface_covered    0.112246\n",
              "4am                0.076955\n",
              "parri              0.063927\n",
              "Reciclado          0.047217\n",
              "Nuevo              0.032124\n",
              "Balcon             0.030523\n",
              "anio_e             0.023482\n",
              "laundry            0.023139\n",
              "cocina             0.016559\n",
              "mes_c             -0.011550\n",
              "mes_s             -0.011550\n",
              "mes_e             -0.022696\n",
              "Patio             -0.028844\n",
              "1am               -0.042986\n",
              "r/sup             -0.074042\n",
              "apto              -0.089988\n",
              "3am               -0.091000\n",
              "2am               -0.188009\n",
              "l5                      NaN\n",
              "anio_s                  NaN\n",
              "anio_c                  NaN\n",
              "Name: price, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 204
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# columnas_2=df.columns.drop('price')\n",
        "columnas_2=X.columns\n",
        "columnas_2\n",
        "diccionario = pd.DataFrame(list(zip(columnas_2,my_pipeline.steps[1][1].feature_importances_*100)), columns = ['features','importance (%)']);\n",
        "primeros = diccionario.nlargest(40,columns=['importance (%)']);\n",
        "\n",
        "plt.figure(figsize=(12,5))\n",
        "sns.barplot(x = \"features\", y = \"importance (%)\",data = primeros)\n",
        "plt.xticks(rotation = 90,fontsize = 10)\n",
        "plt.yticks(fontsize = 10)\n",
        "plt.title('Importancia de features', fontsize=20)\n",
        "plt.xlabel('features', fontsize=20)\n",
        "plt.ylabel('importance (%)', fontsize=20)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "FOs5QAZnHu3m",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "13fb0df3-265f-4acb-f07d-3b0ebb161e93"
      },
      "execution_count": 205,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Predicción para Kaggle\n"
      ],
      "metadata": {
        "id": "sqVkTPzj3kV0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_pred = pd.read_csv('/content/drive/MyDrive/a_predecir.csv', index_col=\"id\")\n",
        "df_pred.fillna(0, inplace=True)"
      ],
      "metadata": {
        "id": "01697gx81F5Z"
      },
      "execution_count": 206,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df_pred['rot_45_x'] = (0.707 * df_pred['lat']) + (0.707 * df_pred['lon'])\n",
        "df_pred['rot_45_y'] = (0.707 * df_pred['lon']) + (0.707 * df_pred['lat'])\n",
        "df_pred['rot_30_x'] = (0.866 * df_pred['lat']) + (0.5 * df_pred['lon'])\n",
        "df_pred['rot_30_y'] = (0.866 * df_pred['lon']) + (0.5 * df_pred['lat'])\n",
        "\n",
        "\n",
        "\n",
        "df_pred['start_date']=pd.to_datetime(df_pred['start_date'])\n",
        "df_pred['anio_s']=pd.DatetimeIndex(df_pred['start_date']).year\n",
        "df_pred['mes_s']=pd.DatetimeIndex(df_pred['start_date']).month\n",
        "df_pred['end_date']=pd.to_datetime(df_pred['end_date'])\n",
        "df_pred['anio_e']=pd.DatetimeIndex(df_pred['end_date']).year\n",
        "df_pred['mes_e']=pd.DatetimeIndex(df_pred['end_date']).month\n",
        "df_pred['created_on']=pd.to_datetime(df_pred['created_on'])\n",
        "df_pred['anio_c']=pd.DatetimeIndex(df_pred['created_on']).year\n",
        "df_pred['mes_c']=pd.DatetimeIndex(df_pred['created_on']).month\n",
        "\n",
        "\n",
        "#Estos +1 son por si aparecen 0\n",
        "df_pred['logr']=np.log(df_pred.rooms+1)\n",
        "df_pred['logbed']=np.log(df_pred.bedrooms+1)\n",
        "df_pred['logbath']=np.log(df_pred.bathrooms+1)\n",
        "df_pred['logsupcov']=np.log(df_pred.surface_covered+1)\n",
        "df_pred['logsuptot']=np.log(df_pred.surface_total+1)\n",
        "\n",
        "\n",
        "df_pred[\"Nuevo\"] = df_pred[\"description\"].str.lower().str.contains(\"excel\")\n",
        "df_pred[\"1am\"] = df_pred[\"description\"].str.lower().str.contains(\"1 ambiente\")\n",
        "df_pred[\"2am\"] = df_pred[\"description\"].str.lower().str.contains(\"2 ambiente\")\n",
        "df_pred[\"3am\"] = df_pred[\"description\"].str.lower().str.contains(\"3 ambiente\")\n",
        "df_pred[\"4am\"] = df_pred[\"description\"].str.lower().str.contains(\"4 ambiente\")\n",
        "df_pred[\"Patio\"] = df_pred[\"description\"].str.lower().str.contains(\"patio\")\n",
        "df_pred[\"Balcon\"] = df_pred[\"description\"].str.lower().str.contains(\"balcon\")\n",
        "df_pred[\"Pileta\"] = df_pred[\"description\"].str.lower().str.contains(\"pileta\")\n",
        "df_pred[\"Reciclado\"] = df_pred[\"description\"].str.lower().str.contains(\"reciclado\")\n",
        "df_pred[\"cocina\"] = df_pred[\"description\"].str.lower().str.contains(\"cocina\")\n",
        "df_pred[\"escri\"] = df_pred[\"description\"].str.lower().str.contains(\"escritorio\")\n",
        "df_pred[\"apto\"] = df_pred[\"description\"].str.lower().str.contains(\"apto profesional\")\n",
        "df_pred[\"laundry\"] = df_pred[\"description\"].str.lower().str.contains(\"laundry\")\n",
        "df_pred[\"parri\"] = df_pred[\"description\"].str.lower().str.contains(\"parrilla\")\n",
        "\n",
        "df_pred['r/sup']=df_pred['rooms']/df_pred['surface_covered']"
      ],
      "metadata": {
        "id": "Kfgbq-2y27z4"
      },
      "execution_count": 213,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_pred.l3.unique()"
      ],
      "metadata": {
        "id": "IKtV8uOvfq_I",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d8cad1a8-4d38-4a75-c621-111d94457244"
      },
      "execution_count": 215,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Balvanera', 'Villa Urquiza', 'Palermo', 'Belgrano', 'Floresta',\n",
              "       'Villa Pueyrredon', 'Saavedra', 'Villa Devoto', 'San Nicolás',\n",
              "       'Chacarita', 'Villa Crespo', 'Boedo', 'Flores', 'Paternal', 'Boca',\n",
              "       'Recoleta', 'Caballito', 'Nuñez', 'Constitución', 'Colegiales',\n",
              "       'San Telmo', 'Monserrat', 'Puerto Madero', 'Villa del Parque',\n",
              "       'Almagro', 'Villa Ortuzar', 'Villa Lugano', 'San Cristobal',\n",
              "       'Barracas', 'Liniers', '2 Ambientes', 'Mataderos',\n",
              "       'Villa Santa Rita', 'Parque Patricios', 'Parque Chas',\n",
              "       'Villa General Mitre', 'Retiro', 'Parque Avellaneda',\n",
              "       'Monte Castro', 'Parque Chacabuco', 'Villa Luro', 'Versalles',\n",
              "       'Coghlan', 'Vélez Sarsfield', 'Nueva Pompeya', 'Agronomía',\n",
              "       'Villa Real', 'GBA Norte'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 215
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# quedate con las mismas columnas que ar_properties\n",
        "X_pred = df_pred[X.columns]"
      ],
      "metadata": {
        "id": "xzAwUNRA1Fzb"
      },
      "execution_count": 216,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import set_config\n",
        "set_config(display='diagram')\n",
        "my_pipeline"
      ],
      "metadata": {
        "id": "pFLjRlW36JXE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 227
        },
        "outputId": "fdaa2022-2776-4fb4-e278-30cefc4aaf96"
      },
      "execution_count": 217,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('preprocessor',\n",
              "                 ColumnTransformer(transformers=[('num',\n",
              "                                                  Pipeline(steps=[('numimputer',\n",
              "                                                                   SimpleImputer()),\n",
              "                                                                  ('scaler',\n",
              "                                                                   StandardScaler())]),\n",
              "                                                  ['rooms', 'bedrooms',\n",
              "                                                   'bathrooms', 'r/sup']),\n",
              "                                                 ('num2',\n",
              "                                                  Pipeline(steps=[('numimputer2',\n",
              "                                                                   SimpleImputer())]),\n",
              "                                                  ['logsuptot', 'logsupcov']),\n",
              "                                                 ('cat',\n",
              "                                                  Pipeline(steps=[('imputer',\n",
              "                                                                   SimpleImputer(strategy='most_frequent')),\n",
              "                                                                  ('onehot',\n",
              "                                                                   OneHotEncoder(handle_unknown='ignore'))]),\n",
              "                                                  ['l3', 'property_type',\n",
              "                                                   'Nuevo', '1am', '2am', '3am',\n",
              "                                                   '4am', 'Patio', 'Balcon',\n",
              "                                                   'Pileta', 'Reciclado',\n",
              "                                                   'cocina', 'escri', 'apto',\n",
              "                                                   'laundry', 'parri'])])),\n",
              "                ('model',\n",
              "                 RandomForestRegressor(max_depth=10, n_estimators=200,\n",
              "                                       n_jobs=-1, random_state=42))])"
            ],
            "text/html": [
              "<style>#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 {color: black;background-color: white;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 pre{padding: 0;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-toggleable {background-color: white;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-item {z-index: 1;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-parallel::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-parallel-item:only-child::after {width: 0;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-91feeaa8-c894-41d8-9f2d-29449e364db8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-91feeaa8-c894-41d8-9f2d-29449e364db8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;numimputer&#x27;,\n",
              "                                                                   SimpleImputer()),\n",
              "                                                                  (&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler())]),\n",
              "                                                  [&#x27;rooms&#x27;, &#x27;bedrooms&#x27;,\n",
              "                                                   &#x27;bathrooms&#x27;, &#x27;r/sup&#x27;]),\n",
              "                                                 (&#x27;num2&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;numimputer2&#x27;,\n",
              "                                                                   SimpleImputer())]),\n",
              "                                                  [&#x27;logsuptot&#x27;, &#x27;logsupcov&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;imputer&#x27;,\n",
              "                                                                   SimpleImputer(strategy=&#x27;most_frequent&#x27;)),\n",
              "                                                                  (&#x27;onehot&#x27;,\n",
              "                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n",
              "                                                  [&#x27;l3&#x27;, &#x27;property_type&#x27;,\n",
              "                                                   &#x27;Nuevo&#x27;, &#x27;1am&#x27;, &#x27;2am&#x27;, &#x27;3am&#x27;,\n",
              "                                                   &#x27;4am&#x27;, &#x27;Patio&#x27;, &#x27;Balcon&#x27;,\n",
              "                                                   &#x27;Pileta&#x27;, &#x27;Reciclado&#x27;,\n",
              "                                                   &#x27;cocina&#x27;, &#x27;escri&#x27;, &#x27;apto&#x27;,\n",
              "                                                   &#x27;laundry&#x27;, &#x27;parri&#x27;])])),\n",
              "                (&#x27;model&#x27;,\n",
              "                 RandomForestRegressor(max_depth=10, n_estimators=200,\n",
              "                                       n_jobs=-1, random_state=42))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"f125490c-8690-4cfb-8279-0e1a8169209f\" type=\"checkbox\" ><label for=\"f125490c-8690-4cfb-8279-0e1a8169209f\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;numimputer&#x27;,\n",
              "                                                                   SimpleImputer()),\n",
              "                                                                  (&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler())]),\n",
              "                                                  [&#x27;rooms&#x27;, &#x27;bedrooms&#x27;,\n",
              "                                                   &#x27;bathrooms&#x27;, &#x27;r/sup&#x27;]),\n",
              "                                                 (&#x27;num2&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;numimputer2&#x27;,\n",
              "                                                                   SimpleImputer())]),\n",
              "                                                  [&#x27;logsuptot&#x27;, &#x27;logsupcov&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;imputer&#x27;,\n",
              "                                                                   SimpleImputer(strategy=&#x27;most_frequent&#x27;)),\n",
              "                                                                  (&#x27;onehot&#x27;,\n",
              "                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n",
              "                                                  [&#x27;l3&#x27;, &#x27;property_type&#x27;,\n",
              "                                                   &#x27;Nuevo&#x27;, &#x27;1am&#x27;, &#x27;2am&#x27;, &#x27;3am&#x27;,\n",
              "                                                   &#x27;4am&#x27;, &#x27;Patio&#x27;, &#x27;Balcon&#x27;,\n",
              "                                                   &#x27;Pileta&#x27;, &#x27;Reciclado&#x27;,\n",
              "                                                   &#x27;cocina&#x27;, &#x27;escri&#x27;, &#x27;apto&#x27;,\n",
              "                                                   &#x27;laundry&#x27;, &#x27;parri&#x27;])])),\n",
              "                (&#x27;model&#x27;,\n",
              "                 RandomForestRegressor(max_depth=10, n_estimators=200,\n",
              "                                       n_jobs=-1, random_state=42))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"f5cc855a-af98-46d9-8602-91ac3ae94b5b\" type=\"checkbox\" ><label for=\"f5cc855a-af98-46d9-8602-91ac3ae94b5b\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;numimputer&#x27;,\n",
              "                                                  SimpleImputer()),\n",
              "                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n",
              "                                 [&#x27;rooms&#x27;, &#x27;bedrooms&#x27;, &#x27;bathrooms&#x27;, &#x27;r/sup&#x27;]),\n",
              "                                (&#x27;num2&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;numimputer2&#x27;,\n",
              "                                                  SimpleImputer())]),\n",
              "                                 [&#x27;logsuptot&#x27;, &#x27;logsupcov&#x27;]),\n",
              "                                (&#x27;cat&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;imputer&#x27;,\n",
              "                                                  SimpleImputer(strategy=&#x27;most_frequent&#x27;)),\n",
              "                                                 (&#x27;onehot&#x27;,\n",
              "                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n",
              "                                 [&#x27;l3&#x27;, &#x27;property_type&#x27;, &#x27;Nuevo&#x27;, &#x27;1am&#x27;, &#x27;2am&#x27;,\n",
              "                                  &#x27;3am&#x27;, &#x27;4am&#x27;, &#x27;Patio&#x27;, &#x27;Balcon&#x27;, &#x27;Pileta&#x27;,\n",
              "                                  &#x27;Reciclado&#x27;, &#x27;cocina&#x27;, &#x27;escri&#x27;, &#x27;apto&#x27;,\n",
              "                                  &#x27;laundry&#x27;, &#x27;parri&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"f9fb81c7-8a4a-46a8-b4ee-765a3f9631bf\" type=\"checkbox\" ><label for=\"f9fb81c7-8a4a-46a8-b4ee-765a3f9631bf\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;rooms&#x27;, &#x27;bedrooms&#x27;, &#x27;bathrooms&#x27;, &#x27;r/sup&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"c13bc488-d239-422f-af18-c07ff5821ab5\" type=\"checkbox\" ><label for=\"c13bc488-d239-422f-af18-c07ff5821ab5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"83c740d0-7913-4368-9597-7e49c8920611\" type=\"checkbox\" ><label for=\"83c740d0-7913-4368-9597-7e49c8920611\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"36a7b245-1428-4cca-9d37-440f8b25a94b\" type=\"checkbox\" ><label for=\"36a7b245-1428-4cca-9d37-440f8b25a94b\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num2</label><div class=\"sk-toggleable__content\"><pre>[&#x27;logsuptot&#x27;, &#x27;logsupcov&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"07cd8134-bb7e-4be5-8f6e-a86855f41f07\" type=\"checkbox\" ><label for=\"07cd8134-bb7e-4be5-8f6e-a86855f41f07\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"4f4c9c23-74b1-4539-8614-5b773453fe2a\" type=\"checkbox\" ><label for=\"4f4c9c23-74b1-4539-8614-5b773453fe2a\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;l3&#x27;, &#x27;property_type&#x27;, &#x27;Nuevo&#x27;, &#x27;1am&#x27;, &#x27;2am&#x27;, &#x27;3am&#x27;, &#x27;4am&#x27;, &#x27;Patio&#x27;, &#x27;Balcon&#x27;, &#x27;Pileta&#x27;, &#x27;Reciclado&#x27;, &#x27;cocina&#x27;, &#x27;escri&#x27;, &#x27;apto&#x27;, &#x27;laundry&#x27;, &#x27;parri&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"4e640290-3f95-46b4-9164-b278e515762c\" type=\"checkbox\" ><label for=\"4e640290-3f95-46b4-9164-b278e515762c\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(strategy=&#x27;most_frequent&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"79469bb9-4bfa-462b-9766-075125e773e2\" type=\"checkbox\" ><label for=\"79469bb9-4bfa-462b-9766-075125e773e2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"f7d91a08-952d-47c8-bd22-c095b92ea41a\" type=\"checkbox\" ><label for=\"f7d91a08-952d-47c8-bd22-c095b92ea41a\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(max_depth=10, n_estimators=200, n_jobs=-1,\n",
              "                      random_state=42)</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 217
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "qoK4SSclnDrr"
      },
      "execution_count": 217,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# los mejores hiperparámetros encontrados antes\n",
        "n_estimators = 200\n",
        "max_depth = 10\n",
        "\n",
        "# entrenamiento\n",
        "# reg = sk.ensemble.RandomForestRegressor(n_estimators=n_estimators, max_depth=max_depth, random_state=42, n_jobs=-1)\n",
        "my_pipeline.fit(X, y)\n",
        "\n",
        "# predicción\n",
        "df_pred[\"price\"] = my_pipeline.predict(X_pred)"
      ],
      "metadata": {
        "id": "81dOh5WvAPMa"
      },
      "execution_count": 218,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# grabo la solución\n",
        "df_pred[[\"price\"]].to_csv(\"solucion.csv\")"
      ],
      "metadata": {
        "id": "mU9iV6cuBwKB"
      },
      "execution_count": 219,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "vhI-JzV_igWE"
      },
      "execution_count": 219,
      "outputs": []
    }
  ]
}
